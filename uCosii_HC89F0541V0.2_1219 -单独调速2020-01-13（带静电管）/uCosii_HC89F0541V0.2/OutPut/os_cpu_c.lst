C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OS_CPU_C
OBJECT MODULE PLACED IN .\OutPut\os_cpu_c.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uCosii\os_cpu_c.c LARGE OPTIMIZE(9,SPEED) BROWSE INCDIR(.\Source;.\uCosi
                    -i) DEBUG OBJECTEXTEND PRINT(.\OutPut\os_cpu_c.lst) TABS(2) OBJECT(.\OutPut\os_cpu_c.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                               uC/OS-II
   4          *                                         The Real-Time Kernel
   5          *
   6          *                         (c) Copyright 1992-2001, Jean J. Labrosse, Weston, FL
   7          *                                          All Rights Reserved
   8          *
   9          *
  10          *                                       80x86/80x88 Specific code
  11          *                                          PROTECTED MEMORY MODEL
  12          *
  13          *                                          vc++6.0
  14          *
  15          * File         : OS_CPU_C.C
  16          * By           : Jean J. Labrosse
  17          *********************************************************************************************************
  18          */
  19          #ifndef __INCLUDES__
  20          #include "source\includes.h"
  21          #endif
  22          /*
  23          *********************************************************************************************************
  24          *                                        INITIALIZE A TASK'S STACK
  25          *
  26          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
  27          *              stack frame of the task being created.  This function is highly processor specific.
  28          *        在console下没有中断调用，应此也没有中断返回地址，vc编译后的保护模式下的段地址没有变的
  29          *       应此也不用压栈，简单起见，我也没有把浮点寄存器压栈
  30          *       
  31          * Arguments  : task          is a pointer to the task code
  32          *
  33          *              pdata         is a pointer to a user supplied data area that will be passed to the task
  34          *                            when the task first executes.
  35          *
  36          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
  37          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then 
  38          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
  39          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
  40          *                            of the stack.
  41          *
  42          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
  43          *                            (see uCOS_II.H for OS_TASK_OPT_???).
  44          *
  45          * Returns    : Always returns the location of the new top-of-stack' once the processor registers have
  46          *              been placed on the stack in the proper order.
  47          *
  48          * Note(s)    : Interrupts are enabled when your task starts executing. You can change this by setting the
  49          *              PSW to 0x0002 instead.  In this case, interrupts would be disabled upon task startup.  The
  50          *              application code would be responsible for enabling interrupts at the beginning of the task
  51          *              code.  You will need to modify OSTaskIdle() and OSTaskStat() so that they enable 
  52          *              interrupts.  Failure to do this will make your system crash!
  53          *********************************************************************************************************
  54          */
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 2   

  55          void Delay_2us(unsigned int fui_i);   //延时函数
  56          OS_STK *OSTaskStkInit (void (*task)(void *pd) reentrant, void *ppdata, OS_STK *ptos, INT16U opt) reentrant
  57          {    
  58   1          OS_STK *stk;
  59   1      
  60   1          ppdata = ppdata;
  61   1          opt    = opt;                               //opt没被用到，保留此语句防止告警产生    
  62   1          stk    = ptos;                              //用户堆栈最低有效地址
  63   1          *stk++ = 15;                                //用户堆栈长度
  64   1          *stk++ = (INT16U)task & 0xFF;               //任务地址低8位
  65   1          *stk++ = (INT16U)task >> 8;                 //任务地址高8位    
  66   1          *stk++ = 0x0A;                              //ACC
  67   1          *stk++ = 0x0B;                              //B
  68   1          *stk++ = 0x00;                              //DPH
  69   1          *stk++ = 0x00;                              //DPL
  70   1          *stk++ = 0x00;                              //PSW
  71   1          *stk++ = 0x00;                              //R0
  72   1          
  73   1        //R3、R2、R1用于传递任务参数ppdata，其中R3代表存储器类型，R2为高字节偏移，R1为低字节位移。
  74   1        //通过分析KEIL汇编，了解到任务的void *ppdata参数恰好是用R3、R2、R1传递，不是通过虚拟堆栈。
  75   1          *stk++ = (INT16U)ppdata & 0xFF;             //R1
  76   1          *stk++ = (INT16U)ppdata >> 8;               //R2
  77   1          *stk++ = 0x01;                              //R3  因为我用的全是XDATA，所以存储器类型固定为1，见C51.PD
             -F第178页说明。
  78   1      
  79   1          *stk++ = 0x04;                              //R4
  80   1          *stk++ = 0x05;                              //R5
  81   1          *stk++ = 0x06;                              //R6
  82   1          *stk++ = 0x07;                              //R7
  83   1                                                      //不用保存SP，任务切换时根据用户堆栈长度计算得出。    
  84   1          *stk++ = (INT16U) (ptos+MaxStkSize) >> 8;   //?C_XBP 仿真堆栈指针高8位
  85   1          *stk++ = (INT16U) (ptos+MaxStkSize) & 0xFF; //?C_XBP 仿真堆栈指针低8位
  86   1              
  87   1          return ((void *)ptos);
  88   1      }
  89          /*
  90             使用C语言的中断处理函数有助与提高程序的移植性。建议中断程序不要太长，如果长则使用信号量来与任务同步，
  91             在外部任务中实现大量的处理。
  92             中断处理例程都放在下面。
  93          */
  94          
  95          void UserTickTimer(void)
  96          {
  97   1          TH0=0xB8;       //普通51定时器方式1，必须在发生中断时，重新赋值并再次启动计时
  98   1          TL0=0;              //Tick=50次/秒(即0.02秒/次)，晶振11.0592M
  99   1          TR0=1;
 100   1      }
 101          
 102          /* 
 103            uCOS-II系统时钟中断处理程序
 104          */
 105          void OSTickISRuser(void) interrupt 1
 106          {
 107   1          OSIntEnter();         // Must be called first at every hardware interrupt entry point 
 108   1          UserTickTimer();        // User functions can be called here.
 109   1          OSTimeTick();         // Must be called during tick isr 
 110   1          OSIntExit();          // Must be called finally at every hardware interupt exit point 
 111   1      }
 112          
 113          void InitHardware(void) reentrant
 114          {   
 115   1        CLKSWR = 0x51;            //选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=16MHz
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 3   

 116   1        CLKDIV = 0x01;            //Fosc 1分频得到Fcpu，Fcpu=16MHz
 117   1        
 118   1      //  CLKSWR = 0x50;            //选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=32MHz
 119   1      //  CLKDIV = 0x01;            //Fosc 1分频得到Fcpu，Fcpu=32MHz
 120   1        
 121   1        
 122   1          TMOD &= 0xF0;
 123   1          TMOD |= 0x01;   //定时器0：模式1(16位定时器)，仅受TR0控制；定时器1：波特率发生器
 124   1          TH0  = 0xB8;   //b8定义Tick=50次/秒(即0.02秒/次),TH,TL值与CPU的频率有关(11.0592M)!!!!!gai!!!!!!
 125   1          TL0  = 0x00;   //00  OS_CPU_C.C中定时器中断响应也要设置，OS_CFG.H中OS_TICKS_PER_SEC也有关系
 126   1          ET0  = 1;    //允许T0中断(在第一个任务开始执行时才开时钟中断,否则万一中断系统进入不可知状态)
 127   1          TR0  = 1;
 128   1          TCON1 |= 0x01;            //T0时钟1分频
 129   1      
 130   1        
 131   1        /*************************************PWM初始化****************************************/
 132   1          P2M3 = 0xC2;                        //P23设置为推挽输出
 133   1          P2M2 = 0xC2;                        //P22设置为推挽输出
 134   1          P1M1 = 0xC2;                        //P11设置为推挽输出
 135   1          P1M2 = 0xC2;                        //P12设置为推挽输出 
 136   1        
 137   1          PWM0_MAP = 0x23;          //PWM0通道映射P23口
 138   1          PWM01_MAP = 0x22;         //PWM01通道映射P22口
 139   1          PWM0C = 0x01;           //PWM0高有效，PWM01高有效，时钟8分频 
 140   1          
 141   1          
 142   1          
 143   1          PWM1_MAP = 0x11;          //PWM0通道映射P11口
 144   1          PWM11_MAP = 0x12;         //PWM01通道映射P12口
 145   1          PWM1C = 0x01;           //PWM1高有效，PWM11高有效，时钟8分频 
 146   1          
 147   1          
 148   1          
 149   1        /*************************************风机****************************************/
 150   1        P1M5 = 0xC2;                        //P15设置为推挽输出
 151   1      //  P1_5 = 0;
 152   1      
 153   1          PWM2_MAP = 0x15;          //PWM2通道映射P15口
 154   1          PWM2C = 0x01;           //PWM2高有效，PWM15高有效，时钟8分频 
 155   1      
 156   1      
 157   1          PWMM |= 0x77;           //PWM0和PWM1工作于互补模式          
 158   1        //独立模式下，PWM0和PWM01共用一个周期寄存器
 159   1        //PWM0的占空比调节使用      PWM0组的占空比寄存器
 160   1        //PWM01的占空比调节使用     PWM0组的死区寄存器
 161   1      
 162   1        //周期计算  = 0x03ff / (Fosc / PWM分频系数)   （Fosc见系统时钟配置的部分）
 163   1        //      = 0x03ff / (16000000 / 8)     
 164   1        //      = 1023   /2000000
 165   1        //      = 511.5us         约1.955kHz
 166   1      //    OSSemCreate(PCF8563Sem, 1);
 167   1      //  task2();
 168   1      
 169   1      //  P2M3 = 0xC0;                        //P26设置为推挽输出
 170   1      //  P2_3 = 0;
 171   1        
 172   1        
 173   1        
 174   1        /*************************************触摸按键****************************************/
 175   1          P1M3 = 0x54;                        //P05设置为非施密特数字带下拉输入
 176   1          P1M4 = 0x54;                        //P34设置为非施密特数字带下拉输入
 177   1        
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 4   

 178   1        /*************************************碰撞****************************************/
 179   1          P1M0 = 0x50;                        //P10设置为非施密特数字带下拉输入
 180   1      
 181   1        /*************************************wifi****************************************/
 182   1          P0M7 = 0xC2;                        //P07设置为推挽输出,wifi
 183   1          P0_7 = 1;                           //wifi使能
 184   1        /*************************************地检****************************************/
 185   1          P2_1 = 1;                           //地检使能
 186   1          P2M1 = 0xC2;                        //P21设置为推挽输出
 187   1          
 188   1      //    P1M3 = 0xC2;                        //P13设置为推挽输出
 189   1      //    P0M4 = 0x68;                        //P05设置为带SMT上拉输入
 190   1      //    PITS1 |= 0x11;            //INT4下降沿
 191   1      //    PINTE0 |= 0x10;           //使能INT4
 192   1      //    IE1 |= 0x80;              //打开INT2-7中断
 193   1          
 194   1      //    /**********************************INT1配置初始化**************************************/
 195   1      //    P0M4 = 0x69;                //P04设置为带SMT上拉输入
 196   1      //    PITS1 |= 0x01;            //INT4下降沿
 197   1      //    IE1 |= 0x80;              //打开INT4中断
 198   1          
 199   1      
 200   1      //  
 201   1        /*************************************蜂鸣器****************************************/
 202   1          P3M2 = 0xC2;                        //P32设置为推挽输出
 203   1        
 204   1        /*************************************LED灯****************************************/
 205   1          P3M0 = 0xC2;                        //P32设置为推挽输出,绿LED
 206   1          P3M1 = 0xC2;                        //P32设置为推挽输出,红LED
 207   1          P3_0 = 1;
 208   1          P3_1 = 1;
 209   1      
 210   1      
 211   1        /*************************************边刷****************************************/
 212   1        P3M3 = 0xC2;                        //P15设置为推挽输出   
 213   1        
 214   1        
 215   1        
 216   1        /*****************5V供电使能**************/
 217   1        P0M6 = 0xC2;                        //P06设置为推挽输出
 218   1        P0_6 = 1;                           //5V供电使能
 219   1        
 220   1      
 221   1      
 222   1      /*****************充电**************/
 223   1      //  P2M0 = 0xC2;
 224   1        P2M0 = 0x60;
 225   1      //  P2_0 = 1;                           //充电使能
 226   1        P3M4 = 0x60;                        //P14设置为非施密特数字带上拉输入
 227   1      
 228   1      
 229   1        /*********************ADC*************************/
 230   1        P0M2 = 0x00;                        //P05设置为模拟输入,右地检58
 231   1        P0M3 = 0x00;                        //P03设置为模拟输入,前地检
 232   1        P0M4 = 0x00;                        //P04设置为模拟输入,左地检
 233   1          
 234   1        P0M1 = 0x02;                //P01设置为模拟输入,左轮ADC
 235   1        P0M0 = 0x02;                //P00设置为模拟输入,右轮ADC
 236   1        P2M7 = 0x02;                //P27设置为模拟输入,风机ADC
 237   1        P2M5 = 0x02;                //P25设置为模拟输入,边刷ADC
 238   1        P2M6 = 0x02;                //P26设置为模拟输入,电源ADC
 239   1      
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 5   

 240   1        ADCC0 = 0x81;           //打开ADC转换电源
 241   1        
 242   1        Delay_2us(20);            //延时20us，确保ADC系统稳定
 243   1        ADCC2 = 0x4B;           //转换结果12位数据，数据右对齐，ADC时钟16分频
 244   1      //  SCANCON = 0x1A;                     //多通道扫描模式，扫描两个通道
 245   1        SCCH0 = 0x10;                       //第一个扫描AN0，第二个扫描AN1
 246   1        
 247   1        
 248   1        SCCH1 = 0xDF;                       //第三个扫描AN15，第四个扫描AN13
 249   1        
 250   1        SCCH2 = 0x4E;                       //第五个扫描AN14，第六个扫描AN4
 251   1        SCCH3 = 0x23;                       //第七个扫描AN3，第八个扫描是AN2
 252   1        
 253   1        SCANCON = 0x1F;                     //多通道扫描模式，扫描八个通道
 254   1          
 255   1          
 256   1          
 257   1        IE1 |= 0x40;                        //打开ADC中断
 258   1        ADCC0 &=~ 0x20;           //清除ADC中断标志位
 259   1        ADCC0 |= 0x40;
 260   1        
 261   1        
 262   1        
 263   1        
 264   1        
 265   1        
 266   1        
 267   1        
 268   1        
 269   1        /*****************定时1读取右轮编码器**************/
 270   1      
 271   1      //  P3M5 = 0x62;                        //P35设置为带上拉输入
 272   1      //  T1_MAP = 0x35;            //T0映射为P02
 273   1      //  TCON1 |= 0x10;            //T1时钟1分频
 274   1      //  TMOD |= 0x40;           //设置T1为计数器模式
 275   1      //  TH1 = 0xFF;
 276   1      //  TL1 = 0xFF;             //1脉冲
 277   1      //  IE |= 0x08;             //打开T1中断
 278   1      //  TCON |= 0x40;           //启动T1
 279   1        
 280   1        P3M5 = 0x69;                //P35设置为带SMT上拉输入
 281   1        PITS4 |= 0x04;            //INT17下降沿
 282   1        PINTE2 |= 0x02;           //使能INT17
 283   1        IE2 |= 0x01;              //打开INT17中断
 284   1          
 285   1      
 286   1        /****************中断读取左轮编码器*****************************/
 287   1        P2M4 = 0x6B;                //P24设置为施密特上拉输入
 288   1        P2INTE |= 0x10;           //使能P24下降沿中断
 289   1        IE2 |= 0x02;            //打开P2口中断
 290   1        EA = 1;               //打开总中断
 291   1        
 292   1      
 293   1      
 294   1        /***********************************WDT配置初始化(看门狗)**************************************/
 295   1        WDTC = 0x17;            //允许WDT复位，允许掉电/空闲模式下运行，1024分频
 296   1      
 297   1        //WDT使用的是RC44K时钟，WDT_CLOCK_1024是1024分频，初值为0xFF
 298   1        //定时时间  = 1024 * 0xFF / 44000
 299   1        //      = 5.93s
 300   1      
 301   1        WDTCCR = 0xFF;            //写入00时，将关闭WDT功能（但不关闭内部低频RC），
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 6   

 302   1                          //即相当于禁止WDT。写入非0数据时，将启动WDT。
 303   1      
 304   1      /************************************************************************************/ 
 305   1      
 306   1      
 307   1      /**********************************UART配置初始化**************************************/
 308   1        P1M6 = 0xC2;                //P16设置为推挽输出
 309   1        P1M7 = 0x62;                //P17设置为上拉输出
 310   1        TXD_MAP = 0x16;           //TXD映射P16
 311   1        RXD_MAP = 0x17;           //RXD映射P17    
 312   1        T4CON = 0x06;           //T4工作模式：UART1波特率发生器
 313   1        //波特率计算
 314   1        //波特率 = 1/16 * (T4时钟源频率 / 定时器4预分频比) / (65536 - 0xFF30)
 315   1        //       = 1/16 * ((32000000 / 1) / 208)
 316   1        //     = 9615.38(误差0.16%)
 317   1      
 318   1        //波特率9600
 319   1        //反推初值 = (65536 - ((T4时钟源频率 / 定时器4预分频比) * (1 / 16)) / 波特率)
 320   1        //       = (65536 - (32000000 * (1 / 16) / 9600))
 321   1        //       = (65536 - 208.33)
 322   1        //         = FF30
 323   1          
 324   1        TH4 = 0xFF;
 325   1        TL4 = 0x98;             //波特率9600,TL4 = 0x98;F7是115200  
 326   1        SCON2 = 0x02;           //8位UART，波特率可变
 327   1        SCON = 0x10;            //允许串行接收
 328   1        IE |= 0x10;             //使能串口中断
 329   1        EA = 1;               //使能总中断
 330   1      /************************************************************************************/      
 331   1      
 332   1      
 333   1      
 334   1          
 335   1      
 336   1      
 337   1      }
 338          
 339          #if OS_CPU_HOOKS_EN
 340          /*
 341          *********************************************************************************************************
 342          *                                       OS INITIALIZATION HOOK
 343          *                                            (BEGINNING)
 344          *
 345          * Description: This function is called by OSInit() at the beginning of OSInit().
 346          *
 347          * Arguments  : none
 348          *
 349          * Note(s)    : 1) Interrupts should be disabled during this call.
 350          *********************************************************************************************************
 351          */
 352          #if OS_VERSION > 203
 353          void OSInitHookBegin (void) reentrant
 354          {
 355   1      }
 356          #endif
 357          
 358          /*
 359          *********************************************************************************************************
 360          *                                       OS INITIALIZATION HOOK
 361          *                                               (END)
 362          *
 363          * Description: This function is called by OSInit() at the end of OSInit().
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 7   

 364          *
 365          * Arguments  : none
 366          *
 367          * Note(s)    : 1) Interrupts should be disabled during this call.
 368          *********************************************************************************************************
 369          */
 370          #if OS_VERSION > 203
 371          void OSInitHookEnd (void) reentrant
 372          {
 373   1      }
 374          #endif
 375          
 376          
 377          /*
 378          *********************************************************************************************************
 379          *                                          TASK CREATION HOOK
 380          *
 381          * Description: This function is called when a task is created.
 382          *
 383          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
 384          *
 385          * Note(s)    : 1) Interrupts are disabled during this call.
 386          *********************************************************************************************************
 387          */
 388          void OSTaskCreateHook (OS_TCB *ptcb) reentrant
 389          {
 390   1          ptcb = ptcb;                       /* Prevent compiler warning                                     */
 391   1      }
 392          
 393          
 394          /*
 395          *********************************************************************************************************
 396          *                                           TASK DELETION HOOK
 397          *
 398          * Description: This function is called when a task is deleted.
 399          *
 400          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
 401          *
 402          * Note(s)    : 1) Interrupts are disabled during this call.
 403          *********************************************************************************************************
 404          */
 405          #if OS_TASK_DEL_EN > 0
              void OSTaskDelHook (OS_TCB *ptcb) reentrant
              {
                  ptcb = ptcb;                       /* Prevent compiler warning                                     */
              }
              #endif
 411          /*
 412          *********************************************************************************************************
 413          *                                           TASK SWITCH HOOK
 414          *
 415          * Description: This function is called when a task switch is performed.  This allows you to perform other
 416          *              operations during a context switch.
 417          *
 418          * Arguments  : none
 419          *
 420          * Note(s)    : 1) Interrupts are disabled during this call.
 421          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
 422          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the 
 423          *                 task being switched out (i.e. the preempted task).
 424          *********************************************************************************************************
 425          */
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 8   

 426          void OSTaskSwHook (void) reentrant
 427          {
 428   1      }
 429          
 430          /*
 431          *********************************************************************************************************
 432          *                                           STATISTIC TASK HOOK
 433          *
 434          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your 
 435          *              application to add functionality to the statistics task.
 436          *
 437          * Arguments  : none
 438          *********************************************************************************************************
 439          */
 440          
 441          #if OS_TASK_STAT_EN > 0
              void OSTaskStatHook (void) reentrant
              {
                //printf("CPU利用率=%d\n",OSCPUUsage);
              }
              #endif
 447          
 448          #if OS_TASK_RETURN_EN >0
              void   OSTaskReturnHook(OS_TCB          *ptcb) reentrant
              {
                ptcb = ptcb;                       /* Prevent compiler warning                                     */
              }
              #endif
 454          
 455          #if OS_DEBUG_EN > 0u
              void          OSDebugInit             (void) reentrant
              {
              }
              #endif
 460          /*
 461          *********************************************************************************************************
 462          *                                           OSTCBInit() HOOK
 463          *
 464          * Description: This function is called by OSTCBInit() after setting up most of the TCB.
 465          *
 466          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
 467          *
 468          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
 469          *********************************************************************************************************
 470          */
 471          #if OS_VERSION > 203
 472          void OSTCBInitHook (OS_TCB *ptcb) reentrant
 473          {
 474   1          ptcb = ptcb;                                           /* Prevent Compiler warning                 */
 475   1      }
 476          #endif
 477          
 478          
 479          /*
 480          *********************************************************************************************************
 481          *                                               TICK HOOK
 482          *
 483          * Description: This function is called every tick.打印定时信息
 484                  
 485          *
 486          * Arguments  : none
 487          *
C51 COMPILER V9.60.0.0   OS_CPU_C                                                          02/22/2021 15:08:12 PAGE 9   

 488          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
 489          *********************************************************************************************************
 490          */
 491          void OSTimeTickHook (void) reentrant
 492          {
 493   1      }
 494          
 495          
 496          /*
 497          *********************************************************************************************************
 498          *                                             IDLE TASK HOOK
 499          *
 500          * Description: This function is called by the idle task.  This hook has been added to allow you to do  
 501          *              such things as STOP the CPU to conserve power.
 502          *
 503          * Arguments  : none 
 504          *
 505          * Note(s)    : 1) Interrupts are enabled during this call.
 506          *********************************************************************************************************
 507          */
 508          #if OS_VERSION >= 251
 509          void OSTaskIdleHook (void) reentrant
 510          {
 511   1        //Sleep(1);   
 512   1      }
 513          #endif
 514          #endif
 515          
 516          
 517          void Delay_2us(unsigned int fui_i)
 518          {
 519   1        while(fui_i--); 
 520   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    774    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
